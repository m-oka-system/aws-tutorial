AWSTemplateFormatVersion: '2010-09-09'
Description: Test cfn Template

################################
# Parameters
################################
Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    Description: Select EC2 instance type.
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select Keypair name.
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
################################
# VPC
################################
  cfnVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: cfn-vpc
################################
# Subnet
################################
  cfnPublicSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref cfnVPC
      CidrBlock: 10.0.11.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: 'ap-northeast-1a'
      Tags:
        - Key: Name
          Value: cfn-vpc-public-1a
  cfnPublicSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref cfnVPC
      CidrBlock: 10.0.12.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: 'ap-northeast-1c'
      Tags:
        - Key: Name
          Value: cfn-vpc-public-1c
  cfnPrivateSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref cfnVPC
      CidrBlock: 10.0.21.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: 'ap-northeast-1a'
      Tags:
        - Key: Name
          Value: cfn-vpc-private-1a
  cfnPrivateSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref cfnVPC
      CidrBlock: 10.0.22.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: 'ap-northeast-1c'
      Tags:
        - Key: Name
          Value: cfn-vpc-private-1c
################################
# Gateway
################################
  cfnInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: cfn-vpc-igw
  cfnAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref cfnVPC
      InternetGatewayId: !Ref cfnInternetGateway
################################
# PublicTable
################################
  cfnRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref cfnVPC
      Tags:
      - Key: Name
        Value: cfn-vpc-public-rt
  cfnRoute:
    Type: AWS::EC2::Route
    DependsOn: cfnInternetGateway
    Properties:
      RouteTableId: !Ref cfnRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref cfnInternetGateway
  cfnSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref cfnPublicSubnet1a
      RouteTableId:  !Ref cfnRouteTable
################################
# EC2
################################
  cfnEC2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      SubnetId: !Ref cfnPublicSubnet1a
      BlockDeviceMappings: 
          - DeviceName: "/dev/xvda"
            Ebs: 
              VolumeType: gp2
              VolumeSize: 20
      Tags:
        - Key: Name
          Value: cfn-web-1
      SecurityGroupIds:
        - !Ref cfnWebSecurityGroup
      KeyName: !Ref KeyPair
################################
# Security Group EC2
################################
  cfnWebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Managed by CloudFormation
      VpcId: !Ref cfnVPC
      Tags:
        - Key: Name
          Value: cfn-web-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
################################
# Security Group RDS
################################
  cfnDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Managed by CloudFormation
      VpcId: !Ref cfnVPC
      Tags:
        - Key: Name
          Value: cfn-db-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref cfnWebSecurityGroup
################################
# RDS
################################
  cfnDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      # instance parameters
      DBInstanceIdentifier: dbinstance
      DBInstanceClass: db.t2.micro
      MultiAZ: false
      AvailabilityZone: ap-northeast-1a
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref cfnDBSubnetGroup
      VPCSecurityGroups:
        - !Ref cfnDBSecurityGroup
      # storage parameters
      StorageType: gp2
      AllocatedStorage: 20 
      # engine parameters
      Engine: mysql
      EngineVersion: 5.7.23
      Port: 3306
      DBName: MyDatabase
      MasterUsername: root
      MasterUserPassword: MyPassword
      # backup and maintenance parameters
      BackupRetentionPeriod: 2
      PreferredBackupWindow: 19:00-20:00
      PreferredMaintenanceWindow: sat:20:00-sat:21:00
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
  cfnDBSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupName: dbinstance-subnet-gp
      DBSubnetGroupDescription: Managed by CloudFormation
      SubnetIds: 
        - !Ref cfnPrivateSubnet1a
        - !Ref cfnPrivateSubnet1c
  cfnDBParameterGroup:
    Type: "AWS::RDS::DBParameterGroup"
    Properties:
      Family: mysql5.7
      Description: Managed by CloudFormation
################################
# ALB
################################
  cfnInternetALB: 
      Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
      Properties: 
        Name: web-alb
        Tags: 
          - Key: Name
            Value: web-alb
        Scheme: "internet-facing"
        SecurityGroups:
          - !Ref cfnWebSecurityGroup
        Subnets: 
          - !Ref cfnPublicSubnet1a
          - !Ref cfnPublicSubnet1c
  cfnALBListener: 
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties: 
      LoadBalancerArn: !Ref cfnInternetALB
      Port: 80
      Protocol: HTTP
      DefaultActions: 
        - TargetGroupArn: !Ref cfnTargetGroup
          Type: forward
  cfnTargetGroup: 
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties: 
      Name: web-alb-tg
      Port: 80
      Protocol: HTTP
      VpcId: !Ref cfnVPC
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckProtocol: HTTP
      HealthCheckPath: "/"
      HealthCheckPort: "traffic-port"
      HealthCheckIntervalSeconds: 10
      Matcher: 
        HttpCode: 200
      Tags: 
        - Key: Name
          Value: web-alb-tg
      Targets: 
        - Id: !Ref cfnEC2Instance
          Port: 80